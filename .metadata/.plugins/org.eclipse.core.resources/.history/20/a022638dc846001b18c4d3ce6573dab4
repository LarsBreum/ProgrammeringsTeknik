import se.lth.cs.pt.maze.Maze;
import se.lth.cs.pt.window.SimpleWindow;


public class MazeWalker {
	private Turtle turtle;
	private boolean wallAtLeft;
	private boolean wallInFront;
	
	public MazeWalker(Turtle turtle){
		this.turtle = turtle;
		wallAtLeft = false;
		wallInFront = false;
	}
	
	public void walk(Maze maze) {
		System.out.println("in walk method");
		turtle.penDown();
		wallAtLeft = maze.wallAtLeft(turtle.getDirection(), turtle.getX(), turtle.getY());
		wallInFront = maze.wallInFront(turtle.getDirection(), turtle.getX(), turtle.getY());
		
		//Om en väg finns till vänster - gå framåt
		while(wallAtLeft == true) {
			turtle.forward(1);
			
			wallAtLeft = maze.wallAtLeft(turtle.getDirection(), turtle.getX(), turtle.getY());
			
			
			//Hantera wallAtLeft == false
			if(wallAtLeft == false) {
				System.out.println("wallAtLeft: " + wallAtLeft);
				turtle.left(90);
				turtle.forward(1);
				if(maze.wallAtLeft(turtle.getDirection(), turtle.getX(), turtle.getY())) {
					wallAtLeft = true;
				}
			}
			System.out.println("WallInfFront: " + wallInFront);
			//Hantera om en vägg finns framför och det finns en vägg till vänster
			if(wallInFront == true) {
				System.out.println("wallInFront: " + wallInFront);
				turtle.left(-90);
				turtle.forward(1);
			}
			
		
		SimpleWindow.delay(10);				
		}
		
		
	}
	//hanter wallAtLeft == false
	private void wallNotAtLeft(){
		
	}
	//Hantera situationen med vägg framför
	private void wallInFront() {
		
	}

}
