import se.lth.cs.pt.window.SimpleWindow;

public class Turtle {
	
	/*Deklarar attributter*/
	
	//Om pennan är nere
	boolean penDown;
	
	//Turtles positionerna
	double xPos;
	
	double yPos;
	//Rikting i radianer
	double dir;
	
	
	/** Skapar en sköldpadda som ritar i ritfönstret w. Från början 
	    befinner sig sköldpaddan i punkten x, y med pennan lyft och 
	    huvudet pekande rakt uppåt i fönstret (i negativ y-riktning). */
	public Turtle(SimpleWindow w, int x, int y) {
		//Börjar med pennan uppa
		penDown = false;
		xPos = x;
		yPos = y;
		dir = Math.PI/2;
	}

	/** Sänker pennan. */
	public void penDown() {
		penDown = true;
	}
	
	/** Lyfter pennan. */
	public void penUp() {
		penDown = false;
	}
	
	/** Går rakt framåt n pixlar i den riktning huvudet pekar. */
	public void forward(int n) {
		xPos = xPos + n * Math.cos(dir);
		yPos = yPos + n * Math.sin(dir);
	}

	/** Vrider beta radianer åt vänster runt pennan. */
	public void left(double beta) {
		//Om inputtet är en int (dvs grader) ska det ändras till radianer
		if (beta % 1 == 0) {
			beta = Math.toRadians(beta);
		}
		dir = dir + beta;
	}
	

	/** Går till punkten newX, newY utan att rita. Pennans läge (sänkt
	    eller lyft) och huvudets riktning påverkas inte. */
	public void jumpTo(int newX, int newY) {
		xPos = newX;
		yPos = newY;
	}

	/** Återställer huvudriktningen till den ursprungliga. */
	public void turnNorth() {
		dir = 0;
	}

	/** Tar reda på x-koordinaten för sköldpaddans aktuella position. */
	public int getX() {
		return ((int) xPos);
	}

 	/** Tar reda på y-koordinaten för sköldpaddans aktuella position. */
	public int getY() {
		return ((int) yPos);
	}
  
	/** Tar reda på sköldpaddans riktning, i grader från den positiva X-axeln. */
 	public int getDirection() {
 		return ((int) Math.toDegrees(dir));
	}
}
